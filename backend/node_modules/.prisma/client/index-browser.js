
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  faculty: 'faculty',
  major: 'major',
  year: 'year',
  role: 'role',
  googleId: 'googleId',
  isSeller: 'isSeller',
  isFirstLogin: 'isFirstLogin',
  profileCompleted: 'profileCompleted',
  isBanned: 'isBanned',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  picture: 'picture',
  reputationScore: 'reputationScore',
  reputationCount: 'reputationCount',
  noShowCount: 'noShowCount'
};

exports.Prisma.SellerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  penName: 'penName',
  phone: 'phone',
  bankName: 'bankName',
  bankAccount: 'bankAccount',
  accountName: 'accountName',
  promptPayId: 'promptPayId',
  totalRevenue: 'totalRevenue',
  sellerId: 'sellerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SheetScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  faculty: 'faculty',
  major: 'major',
  title: 'title',
  subjectCode: 'subjectCode',
  subjectNameJSON: 'subjectNameJSON',
  section: 'section',
  shortDescription: 'shortDescription',
  term: 'term',
  year: 'year',
  price: 'price',
  previewImages: 'previewImages',
  pdfFile: 'pdfFile',
  adminMessage: 'adminMessage',
  status: 'status',
  downloadCount: 'downloadCount',
  isFree: 'isFree',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sheetId: 'sheetId',
  sellerId: 'sellerId',
  amount: 'amount',
  quantity: 'quantity',
  totalPrice: 'totalPrice',
  status: 'status',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  isFreeOrder: 'isFreeOrder',
  verifiedDate: 'verifiedDate',
  paidAt: 'paidAt',
  adminNotes: 'adminNotes',
  orderNumber: 'orderNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentReference: 'paymentReference'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sheetId: 'sheetId',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sheetId: 'sheetId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  orderIds: 'orderIds',
  metadata: 'metadata',
  discountCode: 'discountCode',
  discountAmount: 'discountAmount',
  expiresAt: 'expiresAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  amount: 'amount',
  netAmount: 'netAmount',
  commission: 'commission',
  status: 'status',
  confirmedAt: 'confirmedAt',
  slipImagePath: 'slipImagePath',
  slipUploadDate: 'slipUploadDate',
  slipUploadedBy: 'slipUploadedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppSettingsScalarFieldEnum = {
  id: 'id',
  commissionRate: 'commissionRate',
  payoutSchedule: 'payoutSchedule',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value',
  description: 'description',
  active: 'active',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  usageLimit: 'usageLimit',
  perUserLimit: 'perUserLimit',
  timesUsed: 'timesUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  organizerId: 'organizerId',
  locationName: 'locationName',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  startAt: 'startAt',
  endAt: 'endAt',
  capacity: 'capacity',
  joinPolicy: 'joinPolicy',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reminderOneHourSent: 'reminderOneHourSent',
  pinnedAnnouncementText: 'pinnedAnnouncementText',
  pinnedAnnouncementAt: 'pinnedAnnouncementAt',
  pinnedByUserId: 'pinnedByUserId'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  role: 'role',
  status: 'status',
  checkedInAt: 'checkedInAt',
  joinedAt: 'joinedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  userId: 'userId',
  content: 'content',
  messageType: 'messageType',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  reportedUserId: 'reportedUserId',
  groupId: 'groupId',
  targetType: 'targetType',
  reason: 'reason',
  description: 'description',
  status: 'status',
  adminNote: 'adminNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeedbackScalarFieldEnum = {
  id: 'id',
  targetUserId: 'targetUserId',
  raterUserId: 'raterUserId',
  groupId: 'groupId',
  rating: 'rating',
  dimensions: 'dimensions',
  tags: 'tags',
  comment: 'comment',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  link: 'link',
  data: 'data',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  faculty: 'faculty',
  major: 'major',
  role: 'role',
  googleId: 'googleId',
  picture: 'picture'
};

exports.Prisma.SellerOrderByRelevanceFieldEnum = {
  penName: 'penName',
  phone: 'phone',
  bankName: 'bankName',
  bankAccount: 'bankAccount',
  accountName: 'accountName',
  promptPayId: 'promptPayId',
  sellerId: 'sellerId'
};

exports.Prisma.SheetOrderByRelevanceFieldEnum = {
  faculty: 'faculty',
  major: 'major',
  title: 'title',
  subjectCode: 'subjectCode',
  subjectNameJSON: 'subjectNameJSON',
  section: 'section',
  shortDescription: 'shortDescription',
  term: 'term',
  previewImages: 'previewImages',
  pdfFile: 'pdfFile',
  adminMessage: 'adminMessage',
  status: 'status'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  status: 'status',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  adminNotes: 'adminNotes',
  orderNumber: 'orderNumber',
  paymentReference: 'paymentReference'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.PaymentSessionOrderByRelevanceFieldEnum = {
  sessionId: 'sessionId',
  status: 'status',
  paymentMethod: 'paymentMethod',
  orderIds: 'orderIds',
  metadata: 'metadata',
  discountCode: 'discountCode'
};

exports.Prisma.PayoutOrderByRelevanceFieldEnum = {
  status: 'status',
  slipImagePath: 'slipImagePath'
};

exports.Prisma.AppSettingsOrderByRelevanceFieldEnum = {
  payoutSchedule: 'payoutSchedule'
};

exports.Prisma.DiscountCodeOrderByRelevanceFieldEnum = {
  code: 'code',
  type: 'type',
  description: 'description'
};

exports.Prisma.GroupOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  locationName: 'locationName',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  joinPolicy: 'joinPolicy',
  status: 'status',
  pinnedAnnouncementText: 'pinnedAnnouncementText'
};

exports.Prisma.GroupMemberOrderByRelevanceFieldEnum = {
  role: 'role',
  status: 'status'
};

exports.Prisma.ChatMessageOrderByRelevanceFieldEnum = {
  content: 'content',
  messageType: 'messageType'
};

exports.Prisma.ReportOrderByRelevanceFieldEnum = {
  targetType: 'targetType',
  reason: 'reason',
  description: 'description',
  status: 'status',
  adminNote: 'adminNote'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.UserFeedbackOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  type: 'type',
  title: 'title',
  body: 'body',
  link: 'link'
};


exports.Prisma.ModelName = {
  User: 'User',
  Seller: 'Seller',
  Sheet: 'Sheet',
  Order: 'Order',
  Wishlist: 'Wishlist',
  Review: 'Review',
  PaymentSession: 'PaymentSession',
  Payout: 'Payout',
  AppSettings: 'AppSettings',
  DiscountCode: 'DiscountCode',
  Group: 'Group',
  GroupMember: 'GroupMember',
  Chat: 'Chat',
  ChatMessage: 'ChatMessage',
  Report: 'Report',
  UserFeedback: 'UserFeedback',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
